// ARDUINO MDA Screendriver (monochrome) - resolution 116 x 88

#define HSYNC 8
#define VSYNC 18
#define ROWS 94

const byte buf[95][15] = {
  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   2,  31, 159,  24, 199, 152, 199,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   7,  12, 205, 152, 195,  28, 205, 128,   0,   0,   0,   0,   16 },
  { 128,   0,  13, 140, 204, 216, 195,  30, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 204, 204, 216, 195,  31, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 207, 140, 216, 195,  27, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 205, 140, 216, 195,  25, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  31, 204, 204, 216, 195,  24, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 204, 204, 216, 195,  24, 216, 192,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 204, 205, 152, 195,  24, 205, 128,   0,   0,   0,   0,   16 }, 
  { 128,   0,  24, 220, 223,  15, 135, 152, 199,   0,   0,   0,   0,   0,   16 },  
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,  15, 120, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 108, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 102, 198,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 108, 170,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   6, 120, 146,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 108, 130,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   6, 102, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 102, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   6, 108, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,  15, 120, 130,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 129, 120,  24,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 129, 108,  60,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 195, 102, 102,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 231, 102, 195,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0, 165, 102, 195,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 153, 102, 255,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0, 129, 102, 255,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 129, 102, 195,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 129, 108, 195,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0, 129, 120, 195,   0,   0,   0,   0,   0,   0,   0,   16 },  
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,   0, 195,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,  66, 195,  66,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,   0, 195,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 255,  60, 255,  60,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 255,  66, 255,  66,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,  66, 195,  66,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,  66, 195,  66,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0, 195,  60, 195,  60,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,  24,  24, 130,   0, 120,  15, 126,  30,  66,   6,   0,   0,   0,   16 }, 
  { 128,  60,  60, 130,   0, 108,   6, 126, 112,  66,   6,   0,   0,   0,   16 }, 
  { 128,  66,  66, 130,   0, 102,   6,  24,  96,  66,   6,   0,   0,   0,   16 }, 
  { 128,  66,  66, 130,   0, 108,   6,  24,  96,  66,   6,   0,   0,   0,   16 }, 
  { 128,  66,  66, 130,   0, 120,   6,  24,  96, 126,   6,   0,   0,   0,   16 }, 
  { 128, 126, 126, 146,   0, 108,   6,  24,  96, 126,   6,   0,   0,   0,   16 }, 
  { 128, 126, 126, 170,   0, 102,   6,  24,  96,  66,   0,   0,   0,   0,   16 }, 
  { 128,  66,  66, 198,   0, 102,   6,  24,  96,  66,   6,   0,   0,   0,   16 }, 
  { 128,  66,  66, 130,   0, 108,   6,  24, 112,  66,   6,   0,   0,   0,   16 }, 
  { 128,  66,  66, 130,   0, 120,  15,  24,  30,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 },
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16 }, 
  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240 }, 
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0}
};



#define SETC(x) PORTB = (PORTB & ~7) | x

#define EXEC_NOP asm volatile ("nop\n\t")
#define EXEC_10_NOPS EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
#define EXEC_50_NOPS EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS;
#define EXEC_100_NOPS EXEC_50_NOPS; EXEC_50_NOPS;

#define EXEC_LEFT_BLANKING_AND_OVERSCAN() { EXEC_50_NOPS; SETC(0); EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; }
#define EXEC_RIGHT_OVERSCAN_AND_BLANKING() { SETC(0); EXEC_50_NOPS; EXEC_50_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; }
#define EXEC_HSYNC() { PORTB |= HSYNC; EXEC_50_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; PORTB &= ~HSYNC; }

void DRAW_PIXELS_FOR_LINE(int i) { 
  SETC((buf[i][0] >> 7) & 1);          
  SETC((buf[i][0] >> 6) & 1);          
  SETC((buf[i][0] >> 5) & 1);           
  SETC((buf[i][0] >> 4) & 1);          
  SETC((buf[i][0] >> 3) & 1);          
  SETC((buf[i][0] >> 2) & 1);          
  SETC((buf[i][0] >> 1) & 1);           
  SETC((buf[i][0] >> 0) & 1);          
  SETC((buf[i][1] >> 7) & 1);          
  SETC((buf[i][1] >> 6) & 1);          
  SETC((buf[i][1] >> 5) & 1);           
  SETC((buf[i][1] >> 4) & 1);          
  SETC((buf[i][1] >> 3) & 1);          
  SETC((buf[i][1] >> 2) & 1);          
  SETC((buf[i][1] >> 1) & 1);           
  SETC((buf[i][1] >> 0) & 1);          
  SETC((buf[i][2] >> 7) & 1);          
  SETC((buf[i][2] >> 6) & 1);          
  SETC((buf[i][2] >> 5) & 1);           
  SETC((buf[i][2] >> 4) & 1);          
  SETC((buf[i][2] >> 3) & 1);          
  SETC((buf[i][2] >> 2) & 1);          
  SETC((buf[i][2] >> 1) & 1);           
  SETC((buf[i][2] >> 0) & 1);          
  SETC((buf[i][3] >> 7) & 1);          
  SETC((buf[i][3] >> 6) & 1);          
  SETC((buf[i][3] >> 5) & 1);           
  SETC((buf[i][3] >> 4) & 1);          
  SETC((buf[i][3] >> 3) & 1);          
  SETC((buf[i][3] >> 2) & 1);          
  SETC((buf[i][3] >> 1) & 1);           
  SETC((buf[i][3] >> 0) & 1);          

  // 32

  SETC((buf[i][4] >> 7) & 1);          
  SETC((buf[i][4] >> 6) & 1);          
  SETC((buf[i][4] >> 5) & 1);           
  SETC((buf[i][4] >> 4) & 1);          
  SETC((buf[i][4] >> 3) & 1);          
  SETC((buf[i][4] >> 2) & 1);          
  SETC((buf[i][4] >> 1) & 1);           
  SETC((buf[i][4] >> 0) & 1);          
  SETC((buf[i][5] >> 7) & 1);          
  SETC((buf[i][5] >> 6) & 1);          
  SETC((buf[i][5] >> 5) & 1);           
  SETC((buf[i][5] >> 4) & 1);          
  SETC((buf[i][5] >> 3) & 1);          
  SETC((buf[i][5] >> 2) & 1);          
  SETC((buf[i][5] >> 1) & 1);           
  SETC((buf[i][5] >> 0) & 1);          
  SETC((buf[i][6] >> 7) & 1);          
  SETC((buf[i][6] >> 6) & 1);          
  SETC((buf[i][6] >> 5) & 1);           
  SETC((buf[i][6] >> 4) & 1);          
  SETC((buf[i][6] >> 3) & 1);          
  SETC((buf[i][6] >> 2) & 1);          
  SETC((buf[i][6] >> 1) & 1);           
  SETC((buf[i][6] >> 0) & 1);          
  SETC((buf[i][7] >> 7) & 1);          
  SETC((buf[i][7] >> 6) & 1);          
  SETC((buf[i][7] >> 5) & 1);           
  SETC((buf[i][7] >> 4) & 1);          
  SETC((buf[i][7] >> 3) & 1);          
  SETC((buf[i][7] >> 2) & 1);          
  SETC((buf[i][7] >> 1) & 1);           
  SETC((buf[i][7] >> 0) & 1);          

  // 64

  SETC((buf[i][8] >> 7) & 1);          
  SETC((buf[i][8] >> 6) & 1);          
  SETC((buf[i][8] >> 5) & 1);           
  SETC((buf[i][8] >> 4) & 1);          
  SETC((buf[i][8] >> 3) & 1);          
  SETC((buf[i][8] >> 2) & 1);          
  SETC((buf[i][8] >> 1) & 1);           
  SETC((buf[i][8] >> 0) & 1);          
  SETC((buf[i][9] >> 7) & 1);          
  SETC((buf[i][9] >> 6) & 1);          
  SETC((buf[i][9] >> 5) & 1);           
  SETC((buf[i][9] >> 4) & 1);          
  SETC((buf[i][9] >> 3) & 1);          
  SETC((buf[i][9] >> 2) & 1);          
  SETC((buf[i][9] >> 1) & 1);           
  SETC((buf[i][9] >> 0) & 1);          
  SETC((buf[i][10] >> 7) & 1);          
  SETC((buf[i][10] >> 6) & 1);          
  SETC((buf[i][10] >> 5) & 1);           
  SETC((buf[i][10] >> 4) & 1);          
  SETC((buf[i][10] >> 3) & 1);          
  SETC((buf[i][10] >> 2) & 1);          
  SETC((buf[i][10] >> 1) & 1);           
  SETC((buf[i][10] >> 0) & 1);          
  SETC((buf[i][11] >> 7) & 1);          
  SETC((buf[i][11] >> 6) & 1);          
  SETC((buf[i][11] >> 5) & 1);           
  SETC((buf[i][11] >> 4) & 1);          
  SETC((buf[i][11] >> 3) & 1);          
  SETC((buf[i][11] >> 2) & 1);          
  SETC((buf[i][11] >> 1) & 1);           
  SETC((buf[i][11] >> 0) & 1);          
  
  // 96

  SETC((buf[i][12] >> 7) & 1);          
  SETC((buf[i][12] >> 6) & 1);          
  SETC((buf[i][12] >> 5) & 1);           
  SETC((buf[i][12] >> 4) & 1);          
  SETC((buf[i][12] >> 3) & 1);          
  SETC((buf[i][12] >> 2) & 1);          
  SETC((buf[i][12] >> 1) & 1);           
  SETC((buf[i][12] >> 0) & 1);

  // 104
  
  SETC((buf[i][13] >> 7) & 1);          
  SETC((buf[i][13] >> 6) & 1);          
  SETC((buf[i][13] >> 5) & 1);           
  SETC((buf[i][13] >> 4) & 1);          
  SETC((buf[i][13] >> 3) & 1);          
  SETC((buf[i][13] >> 2) & 1);          
  SETC((buf[i][13] >> 1) & 1);           
  SETC((buf[i][13] >> 0) & 1);

  // 112

  SETC((buf[i][14] >> 7) & 1);          
  SETC((buf[i][14] >> 6) & 1);          
  SETC((buf[i][14] >> 5) & 1);           
  SETC((buf[i][14] >> 4) & 1);          

  // 116
}

#define DRAW_LINE(i) { \
  EXEC_LEFT_BLANKING_AND_OVERSCAN(); \
  DRAW_PIXELS_FOR_LINE(i); \
  EXEC_RIGHT_OVERSCAN_AND_BLANKING(); \
  EXEC_HSYNC(); \
}

int row = ROWS;

void setup() {
    DDRB = B111111;
    PORTB &= ~(HSYNC | VSYNC | 7);
    noInterrupts();
}

void loop() {
  DRAW_LINE(row); EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
  DRAW_LINE(row); EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
  DRAW_LINE(row);

  switch (row++) {
      case 90:
          PORTB |= VSYNC; // VSYNC HIGH
          break;
      case 91:
          PORTB &= ~VSYNC; // VSYNC LOW
          break;
      case ROWS:
          row = 0;
          break;
  }
}
